"use client";

import React, { useState, useRef, useEffect } from "react";
import { useQRCode } from "next-qrcode";
import Header from "@/components/Header";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { collection, addDoc, doc, updateDoc } from "firebase/firestore";
import { app, db } from "@/utils/firebase";
import html2canvas from "html2canvas";
import Link from "next/link";
import { addQrCodeSchema } from "@/utils/schemas";

const storage = getStorage(app);

function App() {
	const { Canvas } = useQRCode();
	const qrRef = useRef(null);
	const [show, setShow] = useState<boolean>(false);
	const [url, setUrl] = useState<string>("");
	const [title, setTitle] = useState<string>("");
	const [description, setDescription] = useState<string>("");
	const [image, setImage] = useState<any>(null);
	const [qrCodeUrl, setQrCodeUrl] = useState<string>("");
	const [docId, setDocId] = useState<string>("");
	const [errors, setErrors] = useState<{
		title?: string;
		description?: string;
	}>({});

	// Générer le QR code
	const handleGenerate = async () => {
		setErrors({});

		let hasErrors = false;
		if (!title) {
			setErrors((errs) => ({ ...errs, title: "Le titre est requis." }));
			hasErrors = true;
		}
		if (!description) {
			setErrors((errs) => ({
				...errs,
				description: "La description est requise.",
			}));
			hasErrors = true;
		}
		if (hasErrors) return;

		try {
			const urlTitle = title
				.toLowerCase()
				.replace(/[^a-z0-9]+/g, "-")
				.replace(/^-*|-*$/g, "");
			const timestamp = Date.now();
			const autoGeneratedUrl = `${urlTitle}-${timestamp}`;

			let imageUrl = "";
			if (image) {
				const storageRef = ref(storage, `images/${image.name}`);
				await uploadBytes(storageRef, image);
				imageUrl = await getDownloadURL(storageRef);
			}

			const docRef = await addDoc(collection(db, "pages"), {
				url: autoGeneratedUrl,
				title,
				description,
				imageUrl,
				isPublished: false,
			});

			setDocId(docRef.id);
			setQrCodeUrl(autoGeneratedUrl);
			setShow(true);
		} catch (error) {
			console.error("Error generating QR code:", error);
		}
	};

	useEffect(() => {
		const uploadQrCodeImage = async () => {
			if (show && qrRef.current) {
				try {
					const canvas = await html2canvas(qrRef.current);
					console.log(canvas);
					const qrImage = canvas.toDataURL("image/png");
					const qrImageBlob = await (await fetch(qrImage)).blob();

					const qrImageRef = ref(storage, `qr_codes/${docId}.png`);
					await uploadBytes(qrImageRef, qrImageBlob);
					const qrImageUrl = await getDownloadURL(qrImageRef);

					const pageRef = doc(db, "pages", docId);
					await updateDoc(pageRef, {
						qrImageUrl,
					});
				} catch (error) {
					console.error("Error uploading QR code image:", error);
				}
			}
		};

		if (show && docId) {
			uploadQrCodeImage();
		}
	}, [show, docId]);

	return (
		<main className="min-h-screen">
			<Header />
			<div className="flex items-center justify-center flex-col gap-3">
				<h1 className="text-2xl font-bold my-8 py-4">Génération de QR Code</h1>
				<div className="flex flex-col gap-3 w-1/5 py-5">
					<input
						type="text"
						value={title}
						onChange={(e) => setTitle(e.target.value)}
						placeholder="Titre..."
						className="p-2 border rounded-lg border-primary"
					/>
					{/* Étape 3: Afficher les messages d'erreur */}
					{errors.title && <p className="text-red-500">{errors.title}</p>}
					<textarea
						value={description}
						onChange={(e) => setDescription(e.target.value)}
						placeholder="Description..."
						className="p-2 border rounded-lg border-primary"
					/>
					{errors.description && (
						<p className="text-red-500">{errors.description}</p>
					)}
					<input
						type="file"
						onChange={(e: any) => setImage(e.target.files[0])}
						className="p-2 border rounded-lg border-primary"
					/>
					<button
						onClick={handleGenerate}
						className="p-2 bg-primary text-white rounded-lg hover:bg-secondary "
					>
						Générer le QR Code
					</button>
				</div>
			</div>
			{show && qrCodeUrl && (
				<div ref={qrRef} className="flex items-center justify-center my-4 w-fit">
					<Canvas
						text={qrCodeUrl}
						options={{
							errorCorrectionLevel: "M",
							margin: 3,
							scale: 4,
							width: 200,
							color: {
								dark: "#000",
								light: "#fff",
							},
						}}
					/>
				</div>
			)}
			<Link
				href="/admin/qr-code-list"
				className="text-lg font-bold text-center mx-auto my-4 w-fit block"
			>
				Voir la liste des QR Codes
			</Link>
		</main>
	);
}

export default App;
